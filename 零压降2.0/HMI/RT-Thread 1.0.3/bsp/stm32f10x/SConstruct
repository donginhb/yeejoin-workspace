import os
import sys
import rtconfig

RTT_ROOT = os.path.normpath(os.getcwd() + '/../..')
sys.path = sys.path + [os.path.join(RTT_ROOT, 'tools')]
from building import *

# TARGET = 'rtthread-stm32.' + rtconfig.TARGET_EXT
# Standard ver:SCC_1.0.21.20120824_Beta_0
# TARGET = 'SCC_1.0.21.' + time.strftime('%Y%m%d',time.localtime()) + '_Beta_0' + rtconfig.TARGET_EXT
TARGET = rtconfig.TARGET_VER_NAME + rtconfig.TARGET_EXT

env = Environment(tools = ['mingw'],
	AS = rtconfig.AS, ASFLAGS = rtconfig.AFLAGS,
	CC = rtconfig.CC, CCFLAGS = rtconfig.CFLAGS,
	AR = rtconfig.AR, ARFLAGS = '-rc',
	LINK = rtconfig.LINK, LINKFLAGS = rtconfig.LFLAGS)
env.PrependENVPath('PATH', rtconfig.EXEC_PATH)
#default MD5
env.Decider('MD5-timestamp')

if rtconfig.PLATFORM == 'iar':
	env.Replace(CCCOM = ['$CC $CCFLAGS $CPPFLAGS $_CPPDEFFLAGS $_CPPINCFLAGS -o $TARGET $SOURCES'])
	env.Replace(ARFLAGS = [''])
	env.Replace(LINKCOM = ['$LINK $SOURCES $LINKFLAGS -o $TARGET --map project.map'])

Export('RTT_ROOT')
Export('rtconfig')

# prepare building environment
objs = PrepareBuilding(env, RTT_ROOT)

# STM32 firemare library building script
objs = objs + SConscript( GetCurrentDir() + '/Libraries/SConscript', variant_dir='build/bsp/Libraries', duplicate=0)

if GetDepend('RT_USING_RTGUI'):
    if GetDepend('RT_RTGUI_DEMO'):
        objs = objs + SConscript(RTT_ROOT + '/examples/gui/SConscript', variant_dir='build/examples/gui', duplicate=0)
    #objs = objs + SConscript(RTT_ROOT + '/app/gui/SConscript',      variant_dir='build/app/gui',      duplicate=0)
#database
objs = objs + SConscript(RTT_ROOT + '/database/SConscript', variant_dir='build/database', duplicate=0)

#app
objs = objs + SConscript(RTT_ROOT + '/app/SConscript', variant_dir='build/app', duplicate=0)

# build program 
env.Program(TARGET, objs)

# end building 
EndBuilding(TARGET)
